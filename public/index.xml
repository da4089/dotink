<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Ink blog on .ink</title>
    <link>https://dotink.co/</link>
    <description>Recent content in The Ink blog on .ink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dotink.co/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I set up my servers</title>
      <link>https://dotink.co/posts/unix-setup/</link>
      <pubDate>Sun, 21 Jun 2020 11:44:30 -0400</pubDate>
      
      <guid>https://dotink.co/posts/unix-setup/</guid>
      <description>Many of my projects include a web server, usually written in Go, Node.js, or Ink. I deploy these servers to Linux VMs running on DigitalOcean, and I set them all up very similarly. I currently have 17 separate web servers / projects running across two $5/month servers.
In the name of reducing and documenting repetitive tasks, I thought I&amp;rsquo;d write down and share my process for setting up a new Ubuntu web server, and deploying applications to it the way I usually do.</description>
    </item>
    
    <item>
      <title>Computing pi as a Riemann sum</title>
      <link>https://dotink.co/posts/pi-by-riemann-sum/</link>
      <pubDate>Fri, 29 May 2020 10:08:59 -0400</pubDate>
      
      <guid>https://dotink.co/posts/pi-by-riemann-sum/</guid>
      <description>While researching the difference between Intel&amp;rsquo;s various x86 SIMD extensions, I came across this article that demonstrates SSE and AVX performance differences using an algorithm to compute an approximation of pi using a Riemann sum under a curve. Specifically, we can numerically compute the integral
$$\int_{0}^{1} \frac{4}{1 + x^2} \mathrm{d} x = 4 \tan ^{-1} (x) = \pi $$
to find a reasonably quickly converging approximation of \( \pi \). This approach to approximating pi was novel to me, and seemed fun, so wrote a little Ink script to compute the integrals numerically for me.</description>
    </item>
    
    <item>
      <title>Things I&#39;m learning about in sales</title>
      <link>https://dotink.co/posts/sales-learnings/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/posts/sales-learnings/</guid>
      <description>(This is an archived copy of a post originally published at thesephist.com.)
As I&amp;rsquo;m diving deeper into my role at Hack Club Bank, I&amp;rsquo;m trying to learn more about sales and working with customers, and I&amp;rsquo;m also learning a lot every week about leading a B2B product. This is a place for me to collect the things I&amp;rsquo;m learning in the process. I&amp;rsquo;m going to keep this up to date over time, and I thought it would be nice to make it publicly available, in case you might find it useful as well.</description>
    </item>
    
    <item>
      <title>Thank you Repl.it, Hello Hack Club</title>
      <link>https://dotink.co/posts/composing-the-future/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/posts/composing-the-future/</guid>
      <description>(This is an archived copy of a post originally published at thesephist.com.)
Summer&amp;rsquo;s almost over! It&amp;rsquo;s a change of season, and the season of changes.
My internship at Repl.it is coming to a close, and I&amp;rsquo;m joining the fantastic team at Hack Club moving forward. I wanted to take a moment to talk about what I learned at Repl.it, and why I&amp;rsquo;m so excited about Hack Club.
Repl.it: building for builders Today was my last day as an engineering intern at Repl.</description>
    </item>
    
    <item>
      <title>Visualizing and exploring sorting algorithms in two dimensions with Ink</title>
      <link>https://dotink.co/posts/visualizing-sorting-algorithms/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/posts/visualizing-sorting-algorithms/</guid>
      <description>Until Elon Musk brings his Neuralink gadgets to market, our eyes are the highest-bandwidth way we have of understanding the world around us. We can look at something and immediately take in the hues, the lightness and the darkness, the shapes, and most importantly, the patterns that we wouldn&amp;rsquo;t be able to notice if we couldn&amp;rsquo;t use our vision.
In fact, our eyes are surprisingly good at pattern recognition, noticing the rhythm in the details that make up the large-scale structure of what&amp;rsquo;s in front of us.</description>
    </item>
    
    <item>
      <title>How I side project</title>
      <link>https://dotink.co/posts/how-i-side-project/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/posts/how-i-side-project/</guid>
      <description>(This is an archived copy of a post originally published at thesephist.com.)
This post started out as a long-form response to this tweet by Raj Kunkolienkar:
Question to all the side project machines that I follow (with much respect) : what framework / setup / infrastructure / tools do you use to push out ideas to MVP so quickly?@kognise @thesephist @jajoosam
&amp;mdash; Raj Kunkolienkar ðŸš€ (@kunksed) May 21, 2019  &amp;hellip; but then, I got busy, a few weeks passed, and it took a while for me to get back to it.</description>
    </item>
    
    <item>
      <title>An overview of Ink</title>
      <link>https://dotink.co/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/docs/overview/</guid>
      <description>What&amp;rsquo;s Ink? Ink is a functional, general-purpose, interpreted scripting language. It&amp;rsquo;s dynamically and strongly typed. Ink programs can be web servers, short scripts, drawing programs, or anything else that interfaces with files and networks. Ink is designed to be minimal and simple, first and foremost.
I made Ink as an experiment to study writing interpreters and compilers in mid-2019. Since then, I&amp;rsquo;ve worked on several other related projects in the programming language space, but continue to write programs and apps in Ink in my day to day work.</description>
    </item>
    
    <item>
      <title>Open-source Ink projects</title>
      <link>https://dotink.co/docs/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/docs/projects/</guid>
      <description>dotink This website is served by a web server written in Ink
See on GitHub â†’
Polyx Polyx is Linus&amp;rsquo;s personal productivity suite
See on GitHub â†’
Codeliner Codeliner generates graphics from program source files
See on GitHub â†’</description>
    </item>
    
    <item>
      <title>Runtime and builtins</title>
      <link>https://dotink.co/docs/runtime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/docs/runtime/</guid>
      <description>Operating system interfaces Many system interface builtin functions are designed around asynchronous callbacks, and will return an event object to a callback function in response. Such an event object is of a semi-standard form, on success
{ type: &#39;data&#39; data: [... some data] } and on error, frequently the error interface
{ type: &#39;error&#39; message: &amp;lt;string&amp;gt; } When a system-interface builtin is capable of returning such an error event, we&amp;rsquo;ll simply state so, without repeating the shape of the object again every time.</description>
    </item>
    
    <item>
      <title>Standard library reference</title>
      <link>https://dotink.co/docs/lib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dotink.co/docs/lib/</guid>
      <description>The Ink standard library is not current packaged into the distributed binary. However, you can get up-to-date versions of these libraries on GitHub.
Standard (std) std is Ink&amp;rsquo;s core library.
See source on GitHub â†’
log(val) Prints the string version of val to standard output.
scan(cb) Opens standard input, and calls cb with the result of the first chunk of input as a string.
hex(n) Takes a positive integer and returns a lowercase hexadecimal string.</description>
    </item>
    
  </channel>
</rss>